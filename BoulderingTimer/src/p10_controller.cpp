#include "include/p10_controller.h"
#include <string.h>


#define BYTES_IN_GROUP      4
#define GROUP_CNT           4
#define BITS_COUNT          8 //in byte on AVR and Intel
#define COL_CNT             4
#define ROW_CNT             16
#define BUFF_SIZE           (COL_CNT*ROW_CNT)

static const uint8_t virtual_screen[BUFF_SIZE] = {0};

void
CP10Controller::p10_clr() {
  memset(virtual_screen, 0, BUFF_SIZE);
}
//////////////////////////////////////////////////////////////


void
CP10Controller::p10_set_pixel(uint32_t x, uint32_t y) {
  //todo calculate these values
  static const uint8_t yr_vals[BYTES_IN_GROUP] = {
    51, 3, 19, 35,
    50, 2, 18, 34,
    49, 1, 17, 33,
    48, 0, 16, 32
  };
  uint8_t yr = yr_vals[y];
  uint8_t xr = yr + ((x / BITS_COUNT) * COL_CNT);
  screen_buffer[xr] |= (0x80 >> (x % 8));
}
//////////////////////////////////////////////////////////////

void
CP10Controller::p10_clr_pixel(uint32_t x, uint32_t y) {

}
//////////////////////////////////////////////////////////////

void
CP10Controller::p10_set_digit(uint8_t pos, uint8_t dig) {
  static const uint8_t sym_table[] = {
    //0
    0b01111111, 0b01100011, 0b01100011, 0b01111111,
    0b01111111, 0b01100011, 0b01100011, 0b01111111,
    0b00000000, 0b01100011, 0b01100011, 0b01100011,
    0b01100011, 0b01100011, 0b01100011, 0b00000000,
    //1
    0b00000011, 0b00000011, 0b00000011, 0b00000011,
    0b00000011, 0b00000011, 0b00000011, 0b00000011,
    0b00000000, 0b00000011, 0b00000011, 0b00000011,
    0b00000011, 0b00000011, 0b00000011, 0b00000000,
    //2
    0b01111111, 0b01100000, 0b00000011, 0b01111111,
    0b01111111, 0b01100000, 0b00000011, 0b01111111,
    0b00000000, 0b01100000, 0b01111111, 0b00000011,
    0b01100000, 0b01111111, 0b00000011, 0b00000000,
    //3
    0b01111111, 0b00000011, 0b00000011, 0b01111111,
    0b01111111, 0b00000011, 0b00000011, 0b01111111,
    0b00000000, 0b00000011, 0b01111111, 0b00000011,
    0b00000011, 0b01111111, 0b00000011, 0b00000000,
    //4
    0b00000011, 0b00000011, 0b01100011, 0b01100011,
    0b00000011, 0b00000011, 0b01100011, 0b01100011,
    0b00000000, 0b00000011, 0b01111111, 0b01100011,
    0b00000011, 0b01111111, 0b01100011, 0b00000000,
    //5
    0b01111111, 0b00000011, 0b01100000, 0b01111111,
    0b01111111, 0b00000011, 0b01100000, 0b01111111,
    0b00000000, 0b00000011, 0b01111111, 0b01100000,
    0b00000011, 0b01111111, 0b01100000, 0b00000000,
    //6
    0b01111111, 0b01100011, 0b01100000, 0b01111111,
    0b01111111, 0b01100011, 0b01100000, 0b01111111,
    0b00000000, 0b01100011, 0b01111111, 0b01100000,
    0b01100011, 0b01111111, 0b01100000, 0b00000000,
    //7
    0b00000011, 0b00000011, 0b00000011, 0b01111111,
    0b00000011, 0b00000011, 0b00000011, 0b01111111,
    0b00000000, 0b00000011, 0b00000011, 0b00000011,
    0b00000011, 0b00000011, 0b00000011, 0b00000000,
    //8
    0b01111111, 0b01100011, 0b01100011, 0b01111111,
    0b01111111, 0b01100011, 0b01100011, 0b01111111,
    0b00000000, 0b01100011, 0b01111111, 0b01100011,
    0b01100011, 0b01111111, 0b01100011, 0b00000000,
    //9
    0b01111111, 0b00000011, 0b01100011, 0b01111111,
    0b01111111, 0b00000011, 0b01100011, 0b01111111,
    0b00000000, 0b00000011, 0b01111111, 0b01100011,
    0b00000011, 0b01111111, 0b01100011, 0b00000000,
  };
  if (dig > 9) return;

  for (int gr = 0; gr < GROUP_CNT; ++gr) {
    for (int gb = 0; gb < BYTES_IN_GROUP; ++gb) {
      virtual_screen[gr*GROUP_CNT*BYTES_IN_GROUP + pos*BYTES_IN_GROUP + gb] =
          sym_table[dig*GROUP_CNT*BYTES_IN_GROUP + gr*BYTES_IN_GROUP + gb];
    }
  }
}
//////////////////////////////////////////////////////////////
